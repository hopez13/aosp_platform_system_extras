{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "411ecab6_830a6c08",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1992436
      },
      "writtenOn": "2023-09-11T09:58:18Z",
      "side": 1,
      "message": "Nice addition!",
      "revId": "5102110a07d124179024b1ba623994afd2e73e19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f360d3c_9ac2da93",
        "filename": "libatrace_rust/benchmark/src/atrace_benchmark_common.rs",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1986660
      },
      "writtenOn": "2023-09-11T11:12:21Z",
      "side": 1,
      "message": "Nit: did you consider generating those from an .h file using e.g. `rust_bindgen {}`? (e.g. here: https://source.corp.google.com/h/googleplex-android/platform/superproject/main/+/main:system/librustutils/Android.bp).\n\nThat way we wouldn\u0027t have 2 places to manually keep in sync to avoid UB.",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 1
      },
      "revId": "5102110a07d124179024b1ba623994afd2e73e19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ceeb766_2a5aa70a",
        "filename": "libatrace_rust/benchmark/src/atrace_benchmark_common.rs",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 2009465
      },
      "writtenOn": "2023-09-11T12:32:38Z",
      "side": 1,
      "message": "We don\u0027t expect changes to the signatures, so it\u0027s simpler to just put them here manually and avoid having an intermeidate target and wrapper header. Added a comment about it.",
      "parentUuid": "9f360d3c_9ac2da93",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 22,
        "endChar": 1
      },
      "revId": "5102110a07d124179024b1ba623994afd2e73e19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25e6ac98_3afdada3",
        "filename": "libatrace_rust/benchmark/src/atrace_benchmark_common.rs",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1986660
      },
      "writtenOn": "2023-09-11T11:12:21Z",
      "side": 1,
      "message": "Nit: did you consider [`std::env::current_exe()`](https://doc.rust-lang.org/std/env/fn.current_exe.html)?",
      "range": {
        "startLine": 34,
        "startChar": 4,
        "endLine": 34,
        "endChar": 85
      },
      "revId": "5102110a07d124179024b1ba623994afd2e73e19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4ebc2547_7500bb11",
        "filename": "libatrace_rust/benchmark/src/atrace_benchmark_common.rs",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 2009465
      },
      "writtenOn": "2023-09-11T12:32:38Z",
      "side": 1,
      "message": "ATrace matches against cmdline, so the full exe path won\u0027t work. Added a clarifying comment.",
      "parentUuid": "25e6ac98_3afdada3",
      "range": {
        "startLine": 34,
        "startChar": 4,
        "endLine": 34,
        "endChar": 85
      },
      "revId": "5102110a07d124179024b1ba623994afd2e73e19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "153004fb_b35d94b3",
        "filename": "libatrace_rust/benchmark/src/tracing_subscriber_benchmark.rs",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 1992436
      },
      "writtenOn": "2023-09-11T09:46:49Z",
      "side": 1,
      "message": "Seems like you run every action only once. This may overpresent initial overhead, e.g. lazy initializations. Is is worth having some of those tests with a loop doing the same operation multiple times?",
      "revId": "5102110a07d124179024b1ba623994afd2e73e19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e92953bf_6df05ae2",
        "filename": "libatrace_rust/benchmark/src/tracing_subscriber_benchmark.rs",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 2009465
      },
      "writtenOn": "2023-09-11T09:52:46Z",
      "side": 1,
      "message": "The loop is built into the criterion calls (line 28):\n```\nc.bench_function(name, |b| b.iter(\u0026mut f))\n```\n\nBy default it includes a 3 sec warmup and 5 sec of measurement:\nhttps://bheisler.github.io/criterion.rs/book/getting_started.html#step-2---add-benchmark\n\nSo the init is actually not represented here at all",
      "parentUuid": "153004fb_b35d94b3",
      "revId": "5102110a07d124179024b1ba623994afd2e73e19",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}