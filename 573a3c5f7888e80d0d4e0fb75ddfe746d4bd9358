{
  "comments": [
    {
      "key": {
        "uuid": "25cff90b_7b52e90e",
        "filename": "librank/librank.c",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-09-20T00:41:10Z",
      "side": 1,
      "message": "This, of course, ensures that libraries_size is _not_ zero ...",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 25
      },
      "revId": "573a3c5f7888e80d0d4e0fb75ddfe746d4bd9358",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41a0b9ae_f23f4f83",
        "filename": "librank/librank.c",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-09-20T00:41:10Z",
      "side": 1,
      "message": "This, of course, ensures that library_mappings_size is _not_ zero.",
      "range": {
        "startLine": 67,
        "startChar": 0,
        "endLine": 67,
        "endChar": 23
      },
      "revId": "573a3c5f7888e80d0d4e0fb75ddfe746d4bd9358",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35c4f0f5_2606ded2",
        "filename": "librank/librank.c",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-09-20T00:41:10Z",
      "side": 1,
      "message": "If libraries_size is zero (which we know it is not), this will cause an out of bounds access on line 122. We should not leave code fragments that will cause future selves distress. Working around a compiler warning with bad code is _not_ desireable.\n\nThe realloc should pick a size that is at least as large as needed. For example:\n\nif (libraries_count \u003e\u003d libraries_size) {\n    libraries_size \u003d max(libraries_size * 2, libraries_count + 1);\n    libraries \u003d realloc(libraries, libraries_size * sizeof(struct library_info));\n    if (!libraries) {\n        . . .\n        exit(EXIT_FAILURE);\n    }\n}\n\nThe above should be recognized by lint as ensuring that realloc will not be supplied a zero-size argument.",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 101,
        "endChar": 5
      },
      "revId": "573a3c5f7888e80d0d4e0fb75ddfe746d4bd9358",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d2456d1_ed5722dc",
        "filename": "librank/librank.c",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2017-09-20T01:17:51Z",
      "side": 1,
      "message": "Mark, I understand that you feel that it is obvious that every use of this has a non-zero value. The problem is that if someone refactors this into a separate library, they might not maintain that invariant for a user that wants to start with a zero-sized memory block. Would it be better to just check the non-zero somewhere separately and error out earlier? I think that pulling the check out into its own conditional makes it clear that this API won\u0027t work for those cases. Does that seem ok? The same principle holds below for mappings_size.",
      "parentUuid": "35c4f0f5_2606ded2",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 101,
        "endChar": 5
      },
      "revId": "573a3c5f7888e80d0d4e0fb75ddfe746d4bd9358",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29998cda_9e7753c2",
        "filename": "librank/librank.c",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-09-20T14:34:20Z",
      "side": 1,
      "message": "But doing a max here as I hinted means this (command) _can_ be pulled into a library, and will continue to function should INIT_LIBRARIES become 0.\n\nRegardless, my main concern is about creating buggy code in the name of warning suppression. How one does correct code can remain an opinion, like the number of stars in the heaven, but bad code is clearly a black hole.\n\nIf one does not think this executable can not turn into a library, watch what I did to liblogcat (where the main function just calls a library function), so that anyone can in-process do a logcat without having to do a pipe/fork/exec.",
      "parentUuid": "2d2456d1_ed5722dc",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 101,
        "endChar": 5
      },
      "revId": "573a3c5f7888e80d0d4e0fb75ddfe746d4bd9358",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd00a35e_69b2c28e",
        "filename": "librank/librank.c",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2017-09-30T00:44:20Z",
      "side": 1,
      "message": "I think we are both in agreement here that the code could become a library at some point in the future. My suggestion was to create a (libraries_size \u003d\u003d 0) check that errors out earlier in this function.\n\nAn alternative (although more work) would be to rewrite part of this code in C++. \"libraries\" is really just a std::map (but probably could be std::unordered_map).\n\nAre either of these options more acceptable, or should we just leave this the way it is now?",
      "parentUuid": "29998cda_9e7753c2",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 101,
        "endChar": 5
      },
      "revId": "573a3c5f7888e80d0d4e0fb75ddfe746d4bd9358",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfe728cb_72141038",
        "filename": "librank/librank.c",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-09-20T00:41:10Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 144,
        "endChar": 5
      },
      "revId": "573a3c5f7888e80d0d4e0fb75ddfe746d4bd9358",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e690f14_e473be39",
        "filename": "librank/librank.c",
        "patchSetId": 2
      },
      "lineNbr": 419,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-09-20T00:41:10Z",
      "side": 1,
      "message": "(see below)\n\n... and here\n\nfree(li-\u003emappings);",
      "range": {
        "startLine": 419,
        "startChar": 22,
        "endLine": 419,
        "endChar": 23
      },
      "revId": "573a3c5f7888e80d0d4e0fb75ddfe746d4bd9358",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "343cb658_679a19cd",
        "filename": "librank/librank.c",
        "patchSetId": 2
      },
      "lineNbr": 419,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2017-09-20T01:17:51Z",
      "side": 1,
      "message": "I agree about just freeing the memory rather than calling exit().",
      "parentUuid": "8e690f14_e473be39",
      "range": {
        "startLine": 419,
        "startChar": 22,
        "endLine": 419,
        "endChar": 23
      },
      "revId": "573a3c5f7888e80d0d4e0fb75ddfe746d4bd9358",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87a925de_457b2e04",
        "filename": "librank/librank.c",
        "patchSetId": 2
      },
      "lineNbr": 422,
      "author": {
        "id": 1032276
      },
      "writtenOn": "2017-09-20T00:41:10Z",
      "side": 1,
      "message": "We still have leak detectors that will pick this up even on exit(). It is a small cost to free the content ...\n\nHere:\n\nfree(libraries);\nreturn 0;",
      "range": {
        "startLine": 422,
        "startChar": 3,
        "endLine": 422,
        "endChar": 12
      },
      "revId": "573a3c5f7888e80d0d4e0fb75ddfe746d4bd9358",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}