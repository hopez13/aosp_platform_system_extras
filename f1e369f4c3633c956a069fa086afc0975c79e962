{
  "comments": [
    {
      "key": {
        "uuid": "54d87e08_800f403c",
        "filename": "avb/README",
        "patchSetId": 3
      },
      "lineNbr": 131,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "Does that mean avbtool will have major/minor version as arguments in the future?",
      "range": {
        "startLine": 131,
        "startChar": 19,
        "endLine": 131,
        "endChar": 61
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_5275f4fa",
        "filename": "avb/README",
        "patchSetId": 3
      },
      "lineNbr": 131,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "We always want to encourage people to use the latest and greatest version of avbtool, I think.\n\nThis very guarantee is what makes this possible, e.g. if you don\u0027t change cmdline args to avbtool any future version (with the same major version) will create the exact same images, bit-for-bit (modulo salt etc.).\n\nSo if this is true, taking major/minor target version as parameters (to e.g. instruct avbtool to create an image matching version 1.42 of the vbmeta format) would make no difference because images targeting different versions would be the same anyway :-)\n\nThe reason for mentioning this right here is mostly to remind whoever approves CLs for avbtool in the future that they must not break this guarantee. In reality we\u0027ll find out if the unit tests start breaking since those unit tests have hashes embedded which would need to get updated... so that\u0027s an extra alarm bell!",
      "parentUuid": "54d87e08_800f403c",
      "range": {
        "startLine": 131,
        "startChar": 19,
        "endLine": 131,
        "endChar": 61
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54e6be5a_019e0a4d",
        "filename": "avb/README",
        "patchSetId": 3
      },
      "lineNbr": 131,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-04T10:55:02Z",
      "side": 1,
      "message": "Cool, thanks for the detailed explanation!\n\nI was confused about what does \"such input\" mean.\nLooks like they\u0027re parameters like --hash_algorithm, --partition_size, --algorithm, etc. And avbtool should guarantee the compatibility when the same cmd-line arguments are provided under the same MAJOR version.",
      "parentUuid": "749bc27c_5275f4fa",
      "range": {
        "startLine": 131,
        "startChar": 19,
        "endLine": 131,
        "endChar": 61
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_7843e1ff",
        "filename": "avb/libavb/avb_chain_partition_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "\u0026src-\u003eparent_descriptor instead of a cast? Same for dest below.",
      "range": {
        "startLine": 26,
        "startChar": 66,
        "endLine": 26,
        "endChar": 69
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b477fabf_0ee7ffdc",
        "filename": "avb/libavb/avb_chain_partition_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "Using 0 as error return value seems uncommon to me.\n  \nBut as it\u0027s consistent inside this folder, this should not be a concern. \n (plus it has warn_unused_result to enforce the caller check the return value)",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 28,
        "endChar": 13
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_f265084a",
        "filename": "avb/libavb/avb_chain_partition_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "The idea is that this function (and many others like it), return a \"boolean\" and TRUE/FALSE.\n\nHowever for various practical reasons, I didn\u0027t want to use C99\u0027s \u0027bool\u0027 type and TRUE/FALSE since that might introduce compatibility issues for users of this library... thinking more about it now, it may make more sense to just use \u0027bool\u0027, TRUE, and FALSE and require/check in avb_sysdeps.h that they work. Thoughts?",
      "parentUuid": "b477fabf_0ee7ffdc",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 28,
        "endChar": 13
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54e6be5a_e1504661",
        "filename": "avb/libavb/avb_chain_partition_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-04T10:55:02Z",
      "side": 1,
      "message": "Yup, I think it\u0027s ok to use bool, TRUE and FALSE for that.\n  \nI didn\u0027t notice this function intends to return true/false, because of its name.\nI\u0027m used to the following:\n\n if (avb_chain_partition_descriptor_validate_and_byteswap(...))\n   error handling.\n  \nOr if the function name changes to:\n if (!avb_chain_partition_descriptor_isvalid(...))\n   error handling.\n\nAnyway, this is just my personal preference so feel free to use your own style.",
      "parentUuid": "749bc27c_f265084a",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 28,
        "endChar": 13
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_513874f2",
        "filename": "avb/libavb/avb_chain_partition_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "OK, I\u0027ll switch it to use \u0027bool\u0027, \u0027true\u0027, and \u0027false\u0027.",
      "parentUuid": "54e6be5a_e1504661",
      "range": {
        "startLine": 28,
        "startChar": 4,
        "endLine": 28,
        "endChar": 13
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_d8f46dc0",
        "filename": "avb/libavb/avb_chain_partition_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "Should the warnings here and below be errors since we\u0027re returning 0?",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 15
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_71a93829",
        "filename": "avb/libavb/avb_chain_partition_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "They\u0027re avb_error() now as per the previous discussion.",
      "parentUuid": "3464ea09_d8f46dc0",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 15
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_b8fbb9ab",
        "filename": "avb/libavb/avb_chain_partition_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "%u? (here and throughout)",
      "range": {
        "startLine": 41,
        "startChar": 51,
        "endLine": 41,
        "endChar": 53
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_715ad859",
        "filename": "avb/libavb/avb_chain_partition_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "As discussed will move all print/logging to not use printf() since it\u0027s not really needed.\n\nThe main reason for this is to make it easier on the people integrating this code... for example, UEFI doesn\u0027t have a libc-compliant printf() (it *looks* like printf() but really isn\u0027t).",
      "parentUuid": "3464ea09_b8fbb9ab",
      "range": {
        "startLine": 41,
        "startChar": 51,
        "endLine": 41,
        "endChar": 53
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_fb8dab28",
        "filename": "avb/libavb/avb_crypto.c",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "no validation? this can only be one of a few values, right?",
      "range": {
        "startLine": 26,
        "startChar": 8,
        "endLine": 26,
        "endChar": 20
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_d143c468",
        "filename": "avb/libavb/avb_crypto.c",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "Additional verification is done in parse_key_data() in avb_rsa.c.",
      "parentUuid": "3464ea09_fb8dab28",
      "range": {
        "startLine": 26,
        "startChar": 8,
        "endLine": 26,
        "endChar": 20
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4954efc_1fd39e5a",
        "filename": "avb/libavb/avb_crypto.h",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "s/four/three ?",
      "range": {
        "startLine": 34,
        "startChar": 46,
        "endLine": 34,
        "endChar": 50
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_12528c6a",
        "filename": "avb/libavb/avb_crypto.h",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d4954efc_1fd39e5a",
      "range": {
        "startLine": 34,
        "startChar": 46,
        "endLine": 34,
        "endChar": 50
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_1894253b",
        "filename": "avb/libavb/avb_crypto.h",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "No longer in this header?",
      "range": {
        "startLine": 92,
        "startChar": 41,
        "endLine": 92,
        "endChar": 45
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_b14c409d",
        "filename": "avb/libavb/avb_crypto.h",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "The |n| and |rr| values follow the header. The intent of the comment-block is to describe everything in the blob which includes the header and data following it.",
      "parentUuid": "3464ea09_1894253b",
      "range": {
        "startLine": 92,
        "startChar": 41,
        "endLine": 92,
        "endChar": 45
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54d87e08_20bf7477",
        "filename": "avb/libavb/avb_crypto.h",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "s/avb_rsa_public_key_header_to_host_byte_order/avb_rsa_public_key_header_validate_and_byteswap ?",
      "range": {
        "startLine": 105,
        "startChar": 27,
        "endLine": 105,
        "endChar": 71
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_72511862",
        "filename": "avb/libavb/avb_crypto.h",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "Ah, yeah, that was the old name. Nice catch. Fixing.",
      "parentUuid": "54d87e08_20bf7477",
      "range": {
        "startLine": 105,
        "startChar": 27,
        "endLine": 105,
        "endChar": 71
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_bb973333",
        "filename": "avb/libavb/avb_crypto.h",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "Should there be an AvbAlgorithmType in here or is that metadata held elsewhere? Derived from key_num_bits?",
      "range": {
        "startLine": 113,
        "startChar": 15,
        "endLine": 113,
        "endChar": 36
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_f146c87a",
        "filename": "avb/libavb/avb_crypto.h",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "The key is independent of the hash function used and we want to keep it so.\n\nThe vbmeta struct is where the AvbAlgorithmType field is stored.\n\nNote also that vbmeta is not tied to RSA - in the future we can add other crypto algorithms to AvbAlgorithmType and things will still work (assuming the crypto algorithm has the concept of public keys and signatures). In that case, the public key stored in vbmeta will not be what AvbRSAPublicKeyHeader describe - it\u0027ll match whatever is suitable for that crypto algorithm.",
      "parentUuid": "3464ea09_bb973333",
      "range": {
        "startLine": 113,
        "startChar": 15,
        "endLine": 113,
        "endChar": 36
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_9b3fcf09",
        "filename": "avb/libavb/avb_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "s/warning/error in this file too? (and throughout CL)",
      "range": {
        "startLine": 27,
        "startChar": 4,
        "endLine": 27,
        "endChar": 15
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_b1156051",
        "filename": "avb/libavb/avb_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3464ea09_9b3fcf09",
      "range": {
        "startLine": 27,
        "startChar": 4,
        "endLine": 27,
        "endChar": 15
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_9be90f81",
        "filename": "avb/libavb/avb_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "This requirement is not documented in the header file.",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 65,
        "endChar": 25
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_d11c6479",
        "filename": "avb/libavb/avb_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3464ea09_9be90f81",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 65,
        "endChar": 25
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_fec59907",
        "filename": "avb/libavb/avb_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "nit: consider more descriptive var names here\n\ndh -\u003e descriptor\nnb_* -\u003e num_bytes_*",
      "range": {
        "startLine": 81,
        "startChar": 1,
        "endLine": 85,
        "endChar": 61
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_310b3032",
        "filename": "avb/libavb/avb_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "I normally would but the 80-character limit makes that somewhat hard.",
      "parentUuid": "3464ea09_fec59907",
      "range": {
        "startLine": 81,
        "startChar": 1,
        "endLine": 85,
        "endChar": 61
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_5b52976b",
        "filename": "avb/libavb/avb_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "nit: more descriptive variable names, please",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 118,
        "endChar": 28
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_1110ac58",
        "filename": "avb/libavb/avb_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 118,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3464ea09_5b52976b",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 118,
        "endChar": 28
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_2c4f6b3d",
        "filename": "avb/libavb/avb_descriptor.h",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "s/AvbHashtreeDescriptor/AvbHashDescriptor",
      "range": {
        "startLine": 34,
        "startChar": 33,
        "endLine": 34,
        "endChar": 54
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_12b52c96",
        "filename": "avb/libavb/avb_descriptor.h",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3464ea09_2c4f6b3d",
      "range": {
        "startLine": 34,
        "startChar": 33,
        "endLine": 34,
        "endChar": 54
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_7bfbdb7a",
        "filename": "avb/libavb/avb_descriptor.h",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "Is there any concern about struct versioning within the vbmetaimage itself? Always assume consistency within an image version? Plan to create a new tag if needed? (E.g. AVB_DESCRIPTOR_TAG_HASH_V2).",
      "range": {
        "startLine": 54,
        "startChar": 15,
        "endLine": 54,
        "endChar": 28
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_11270cd2",
        "filename": "avb/libavb/avb_descriptor.h",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "struct VBMeta is versioned and has reserved space etc.\n\nAs for descriptors, there\u0027s no versioning per se except that it\u0027s possible to add data to the end so in that way it\u0027s semi-expandable. The main idea is that we\u0027ll just introduce new descriptors e.g. HASH_V2 if we need to change things.\n\nWe can even arrange things so an image has both a HASH and HASH_V2 descriptor... that way old firmware w/o support for HASH_V2 reads HASH (it skips HASH_V2 because it\u0027s unknown) and new firmware reads HASH_V2 and skips HASH.\n\nSounds OK?",
      "parentUuid": "3464ea09_7bfbdb7a",
      "range": {
        "startLine": 54,
        "startChar": 15,
        "endLine": 54,
        "endChar": 28
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d97e679c_5eb28900",
        "filename": "avb/libavb/avb_descriptor.h",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-05T22:05:07Z",
      "side": 1,
      "message": "sgtm",
      "parentUuid": "5904374d_11270cd2",
      "range": {
        "startLine": 54,
        "startChar": 15,
        "endLine": 54,
        "endChar": 28
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_3bf56383",
        "filename": "avb/libavb/avb_descriptor.h",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "why 64 bits for the tag? future plans? padding? (If padding, I\u0027d prefer it to be explicit e.g. uint8_t reserved[4]).",
      "range": {
        "startLine": 55,
        "startChar": 11,
        "endLine": 55,
        "endChar": 14
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_51319406",
        "filename": "avb/libavb/avb_descriptor.h",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "Mostly so we end up with 16 bytes.\n\nThe thinking was this: I definitely wanted |num_bytes_following| to be 64-bit because we might actually want to stash payloads in a vbmeta struct and those could easily exceed 4 GiB in a not-so-far-fetched star-trek future.\n\nI loathe adding reserved bytes because then it looks like an intent to add future features to the descriptor struct which is in conflict with the nice-and-simple \"just add a HASH_V2 descriptor if you need changes\" versioning-approach.\n\nAt the same time I do understand your concern that 64-bit space for descriptor identifiers is overkill...\n\nThoughts?",
      "parentUuid": "3464ea09_3bf56383",
      "range": {
        "startLine": 55,
        "startChar": 11,
        "endLine": 55,
        "endChar": 14
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d97e679c_9ed6e118",
        "filename": "avb/libavb/avb_descriptor.h",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-05T22:05:07Z",
      "side": 1,
      "message": "sgtm",
      "parentUuid": "5904374d_51319406",
      "range": {
        "startLine": 55,
        "startChar": 11,
        "endLine": 55,
        "endChar": 14
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94dd9660_abeac9dd",
        "filename": "avb/libavb/avb_hashtree_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "Can we have stricter expectations about the length of these fields? For instance a hash likely has no business being larger than 64 bytes and same for salt. (Same for other descriptor types).",
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_b1fe0005",
        "filename": "avb/libavb/avb_hashtree_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "The intent of the validate_and_byteswap() is more that of syntax and basic sanity-check, not so much go deeply into the semantics of each field.\n\nI can add the checks but it\u0027s worth pointing out we\u0027re only reading these fields only AFTER we\u0027ve verified vbmeta. So in that sense, all data here can be considered \"trusted\". That is, if an attacker has the ability to modify this data he likely has access to the private keys.",
      "parentUuid": "94dd9660_abeac9dd",
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94dd9660_0bfc3da2",
        "filename": "avb/libavb/avb_hashtree_descriptor.h",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "nit: Any reason for the inconsistency between the terms \u0027digest\u0027 (e.g. AvbHashDescriptor) and \u0027hash\u0027?",
      "range": {
        "startLine": 52,
        "startChar": 16,
        "endLine": 52,
        "endChar": 20
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_510a342a",
        "filename": "avb/libavb/avb_hashtree_descriptor.h",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "Nope. Renaming this to root digest.",
      "parentUuid": "94dd9660_0bfc3da2",
      "range": {
        "startLine": 52,
        "startChar": 16,
        "endLine": 52,
        "endChar": 20
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94dd9660_ae86570c",
        "filename": "avb/libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "style nit: out args after in args? Also s/buf/buffer throughout please.",
      "range": {
        "startLine": 77,
        "startChar": 37,
        "endLine": 77,
        "endChar": 46
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_f1f88819",
        "filename": "avb/libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94dd9660_ae86570c",
      "range": {
        "startLine": 77,
        "startChar": 37,
        "endLine": 77,
        "endChar": 46
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3406aa9f_482fdf3c",
        "filename": "avb/libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "nit: to",
      "range": {
        "startLine": 80,
        "startChar": 43,
        "endLine": 80,
        "endChar": 47
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_d1f58421",
        "filename": "avb/libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3406aa9f_482fdf3c",
      "range": {
        "startLine": 80,
        "startChar": 43,
        "endLine": 80,
        "endChar": 47
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "746e62eb_f56b6fec",
        "filename": "avb/libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "How do we know if a public key is trusted as it doesn\u0027t provide the partition name in question.\n  \nOr this means the OEM key embedded in the bootloader?\nIf so, how about rename it to \"validate_vbmeta_public_key\".",
      "range": {
        "startLine": 103,
        "startChar": 8,
        "endLine": 103,
        "endChar": 27
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_92c83c22",
        "filename": "avb/libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 103,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "Yep, this refers to the OEM key embedded in the bootloader. I will update the docs to point this out. Agree on renaming, doing that too!",
      "parentUuid": "746e62eb_f56b6fec",
      "range": {
        "startLine": 103,
        "startChar": 8,
        "endLine": 103,
        "endChar": 27
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3414ead3_f881b1f7",
        "filename": "avb/libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "Is there any way to lock a rollback index so it cannot be tampered with beyond a certain point in the verified boot flow?",
      "range": {
        "startLine": 126,
        "startChar": 8,
        "endLine": 126,
        "endChar": 28
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_1111cc55",
        "filename": "avb/libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "That\u0027s going to be up to the implementer, I think. We could add an operation to AvbOps to request locking down that storage once we\u0027re done with the A/B flow.... I\u0027ll look at that when I do that CL (it will follow this one).",
      "parentUuid": "3414ead3_f881b1f7",
      "range": {
        "startLine": 126,
        "startChar": 8,
        "endLine": 126,
        "endChar": 28
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_27230414",
        "filename": "avb/libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 131,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "How about add:\n  In Android, it checks the property androidboot.avb.device_state, which might be \"locked\" or \"unlocked\".",
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_52d6d4bd",
        "filename": "avb/libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 131,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "Well, this would only be true when we\u0027ve booted the kernel and actually running Android. When in the bootloader - where this library is intended to be used [1] - we\u0027re not yet running Android...\n\n[1] : OK, we\u0027ll also use it in fs_mgr and for the boot_control HAL and in those cases the way to implement the read_is_unlocked() operation would indeed be to check an androidboot.* property.",
      "parentUuid": "3464ea09_27230414",
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54e6be5a_21434e9d",
        "filename": "avb/libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 131,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-04T10:55:02Z",
      "side": 1,
      "message": "Make sense, thanks for the excellent explanation.\n\nI conflated different contexts when adding the comment: bootloader, fs_mgr and boot_control HAL.",
      "parentUuid": "749bc27c_52d6d4bd",
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f48172c9_c7ba3e86",
        "filename": "avb/libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 133,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "nit: maybe \"is_device_unlocked\" is better?",
      "range": {
        "startLine": 133,
        "startChar": 8,
        "endLine": 133,
        "endChar": 24
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_72dbd8e4",
        "filename": "avb/libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 133,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "Makes sense, I\u0027ll change it!",
      "parentUuid": "f48172c9_c7ba3e86",
      "range": {
        "startLine": 133,
        "startChar": 8,
        "endLine": 133,
        "endChar": 24
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3414ead3_b8a25994",
        "filename": "avb/libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 139,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "Out of curiosity, why not get the raw 16 byte value and do the formatting as needed?",
      "range": {
        "startLine": 138,
        "startChar": 17,
        "endLine": 139,
        "endChar": 15
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_f129a88e",
        "filename": "avb/libavb/avb_ops.h",
        "patchSetId": 3
      },
      "lineNbr": 139,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "Mostly just for making unit-test easier but also to facilitate this code running on top of non-GPT partitioning schemes...",
      "parentUuid": "3414ead3_b8a25994",
      "range": {
        "startLine": 138,
        "startChar": 17,
        "endLine": 139,
        "endChar": 15
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3414ead3_582d3dfb",
        "filename": "avb/libavb/avb_property_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "nit: more descriptive please",
      "range": {
        "startLine": 64,
        "startChar": 24,
        "endLine": 64,
        "endChar": 26
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_113a6ccd",
        "filename": "avb/libavb/avb_property_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3414ead3_582d3dfb",
      "range": {
        "startLine": 64,
        "startChar": 24,
        "endLine": 64,
        "endChar": 26
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3414ead3_b8da59df",
        "filename": "avb/libavb/avb_property_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "Is it ok to ignore the value length? E.g. val\u003d\"123\\x00\\xFF\" val_len\u003d5. This function will return \u0027123\u0027 and will not trip on the 0x00 or 0xFF bytes. Maybe this is ok, but it could end up masking bugs. Also, should this behavior be documented?",
      "range": {
        "startLine": 125,
        "startChar": 69,
        "endLine": 125,
        "endChar": 73
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_712f788f",
        "filename": "avb/libavb/avb_property_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "I\u0027ll document it (will insert \"initial portions of\" before \"value\").",
      "parentUuid": "3414ead3_b8da59df",
      "range": {
        "startLine": 125,
        "startChar": 69,
        "endLine": 125,
        "endChar": 73
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3414ead3_7845a14d",
        "filename": "avb/libavb/avb_property_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "optional: if you put \u0027base \u003d\u003d 16 \u0026\u0026 \u0027 into this and the next conditions you can do away with the switch statement.",
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_9145bc52",
        "filename": "avb/libavb/avb_property_descriptor.c",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "Nice. Doing that.",
      "parentUuid": "3414ead3_7845a14d",
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3414ead3_38af297c",
        "filename": "avb/libavb/avb_property_descriptor.h",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "This is inconsistent with the layout of other descriptors. Why the null bytes? If the *_num_bytes fields need to be populated anyways it seems easy enough to work with without null terminators.",
      "range": {
        "startLine": 33,
        "startChar": 3,
        "endLine": 33,
        "endChar": 25
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_d12624be",
        "filename": "avb/libavb/avb_property_descriptor.h",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "It\u0027s that way for convenience since these are typically UTF-8 strings you want to do manipulations on. Easier and less error-prone to do that if you can assume they\u0027re NUL-terminated, otherwise you need to deal with lengths and so on.",
      "parentUuid": "3414ead3_38af297c",
      "range": {
        "startLine": 33,
        "startChar": 3,
        "endLine": 33,
        "endChar": 25
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3414ead3_984bd5b7",
        "filename": "avb/libavb/avb_property_descriptor.h",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "For clarity, consider \"If |key_size| is 0, |key| must be NUL-terminated.\"",
      "range": {
        "startLine": 53,
        "startChar": 33,
        "endLine": 54,
        "endChar": 30
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_3135f0df",
        "filename": "avb/libavb/avb_property_descriptor.h",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3414ead3_984bd5b7",
      "range": {
        "startLine": 53,
        "startChar": 33,
        "endLine": 54,
        "endChar": 30
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3414ead3_3885e904",
        "filename": "avb/libavb/avb_rsa.c",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "But this is Android\u0027s RSA verification code.",
      "range": {
        "startLine": 23,
        "startChar": 41,
        "endLine": 23,
        "endChar": 72
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_d13f44b6",
        "filename": "avb/libavb/avb_rsa.c",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "Right, we\u0027ve come full circle... I\u0027ll change this to libmincrypt since I believe that is the origin that was meant with \"Android RSA verification code\".",
      "parentUuid": "3414ead3_3885e904",
      "range": {
        "startLine": 23,
        "startChar": 41,
        "endLine": 23,
        "endChar": 72
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3414ead3_5b91b740",
        "filename": "avb/libavb/avb_rsa.c",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "I assume this code has been separately reviewed by a crypto expert? Same with hash implementations?",
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_516d14d4",
        "filename": "avb/libavb/avb_rsa.c",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "It\u0027s straight from ChromiumOS so I would guess so. I\u0027ve tried to keep my changes to this code minimal (reformatting, prefixing, etc.)",
      "parentUuid": "3414ead3_5b91b740",
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54d87e08_0049108b",
        "filename": "avb/libavb/avb_rsa.c",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "Is this little endian or host byte order?",
      "range": {
        "startLine": 34,
        "startChar": 34,
        "endLine": 34,
        "endChar": 47
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_b2ec6091",
        "filename": "avb/libavb/avb_rsa.c",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "It\u0027s host byte order. Fixing. Nice catch.",
      "parentUuid": "54d87e08_0049108b",
      "range": {
        "startLine": 34,
        "startChar": 34,
        "endLine": 34,
        "endChar": 47
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14552639_776630c4",
        "filename": "avb/libavb/avb_rsa.c",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "how about: \n  uint32_t tmp \u003d avb_be32toh(((uint32_t*)inout)[key-\u003elen - 1 - i]);",
      "range": {
        "startLine": 163,
        "startChar": 0,
        "endLine": 166,
        "endChar": 62
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_1287ecbd",
        "filename": "avb/libavb/avb_rsa.c",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "This code is from Chromium which is from Android and I\u0027d rather not change it (makes security patching harder). I\u0027d also like to avoid the function call overhead of avb_be32toh(). I\u0027ll update the comment for s/little-endian order/host-byte order/.",
      "parentUuid": "14552639_776630c4",
      "range": {
        "startLine": 163,
        "startChar": 0,
        "endLine": 166,
        "endChar": 62
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54e6be5a_613d560f",
        "filename": "avb/libavb/avb_rsa.c",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-04T10:55:02Z",
      "side": 1,
      "message": "Sure, np!\n\nI wasn\u0027t aware this code is from Chromium (but noticed that avb_sha256.c or avb_sha512.c are from open source).\n\nBut I totally agree to reuse the same codes for security related operations.",
      "parentUuid": "749bc27c_1287ecbd",
      "range": {
        "startLine": 163,
        "startChar": 0,
        "endLine": 166,
        "endChar": 62
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3414ead3_f870d176",
        "filename": "avb/libavb/avb_rsa.c",
        "patchSetId": 3
      },
      "lineNbr": 245,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "This will give a timing oracle as to whether the signature was ok vs an unexpected hash. While I don\u0027t know of any related attack it would be easy to eliminate by taking the fully padded expected value as one input, not two (and doing a single safe_memcmp), or by always computing both safe_memcmp even if the first fails.\n\nIt would also be good to avoid returning success based on a single branch. E.g. compute the result as an accumulated XOR instead of using safe_memcmp.",
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_b151e00c",
        "filename": "avb/libavb/avb_rsa.c",
        "patchSetId": 3
      },
      "lineNbr": 245,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "Ah, OK, that\u0027s what you meant with in the other comment on safe_memcmp. So I\u0027ll disregard this since I believe we\u0027re good.",
      "parentUuid": "3414ead3_f870d176",
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d97e679c_1ec3b160",
        "filename": "avb/libavb/avb_rsa.c",
        "patchSetId": 3
      },
      "lineNbr": 245,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-05T22:05:07Z",
      "side": 1,
      "message": "The timing oracle still exists, but if this is the way chromiumos does it then not diverging may be more important.",
      "parentUuid": "5904374d_b151e00c",
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14552639_9ad84947",
        "filename": "avb/libavb/avb_rsa.h",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "key",
      "range": {
        "startLine": 48,
        "startChar": 27,
        "endLine": 48,
        "endChar": 37
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_92ef5c85",
        "filename": "avb/libavb/avb_rsa.h",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14552639_9ad84947",
      "range": {
        "startLine": 48,
        "startChar": 27,
        "endLine": 48,
        "endChar": 37
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3414ead3_9b22ef0d",
        "filename": "avb/libavb/avb_slot_verify.h",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "nit: This sentence could be more clear. \"AvbSlotVerifyData contains data needed to boot a particular slot.\" Or something...",
      "range": {
        "startLine": 47,
        "startChar": 3,
        "endLine": 47,
        "endChar": 61
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_914e5c6a",
        "filename": "avb/libavb/avb_slot_verify.h",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "OK, I\u0027ll rephrase it.",
      "parentUuid": "3414ead3_9b22ef0d",
      "range": {
        "startLine": 47,
        "startChar": 3,
        "endLine": 47,
        "endChar": 61
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3414ead3_db514767",
        "filename": "avb/libavb/avb_slot_verify.h",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1079236
      },
      "writtenOn": "2016-08-04T00:46:08Z",
      "side": 1,
      "message": "nit: remove \u0027and\u0027",
      "range": {
        "startLine": 104,
        "startChar": 49,
        "endLine": 104,
        "endChar": 52
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5904374d_f15b6826",
        "filename": "avb/libavb/avb_slot_verify.h",
        "patchSetId": 3
      },
      "lineNbr": 104,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-05T21:03:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3414ead3_db514767",
      "range": {
        "startLine": 104,
        "startChar": 49,
        "endLine": 104,
        "endChar": 52
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4989235_08c36835",
        "filename": "avb/libavb/avb_util.c",
        "patchSetId": 3
      },
      "lineNbr": 226,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "The i-th occurrence will be mem-copied multiple (K - i + 1) times, \nwhere K is the total occurrences of the \"search\" in str.\n\nMaybe we could consider using two passes: \nscan how many occurrences at first, allocate the final size then do a memcpy at the second pass \n(similar to SetDescriptorData used in avb_descriptor_get_all()).\n  \nI\u0027m ok with the current approach now, given this is only \nused for kernel cmdline processing (which should be short?).",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 226,
        "endChar": 28
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_f28188a1",
        "filename": "avb/libavb/avb_util.c",
        "patchSetId": 3
      },
      "lineNbr": 226,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "Yeah, this wasn\u0027t written with performance in mind exactly because its use is so limited... if this changes, I\u0027m all for optimizing it!",
      "parentUuid": "f4989235_08c36835",
      "range": {
        "startLine": 214,
        "startChar": 0,
        "endLine": 226,
        "endChar": 28
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f48172c9_4ab5d5c7",
        "filename": "avb/libavb/avb_util.c",
        "patchSetId": 3
      },
      "lineNbr": 248,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "should this be (although the ret_len is unused later):\n  ret_len \u003d num_new - 1;",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 248,
        "endChar": 22
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_12ae0c36",
        "filename": "avb/libavb/avb_util.c",
        "patchSetId": 3
      },
      "lineNbr": 248,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "It should. Good eyes! Fixing.",
      "parentUuid": "f48172c9_4ab5d5c7",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 248,
        "endChar": 22
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9474b6be_8d8b1580",
        "filename": "avb/libavb/avb_util.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "s/opration/operation",
      "range": {
        "startLine": 68,
        "startChar": 27,
        "endLine": 68,
        "endChar": 35
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_328cf0df",
        "filename": "avb/libavb/avb_util.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9474b6be_8d8b1580",
      "range": {
        "startLine": 68,
        "startChar": 27,
        "endLine": 68,
        "endChar": 35
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_1245e14e",
        "filename": "avb/libavb/avb_util.h",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "s/occurence/occurrence",
      "range": {
        "startLine": 84,
        "startChar": 19,
        "endLine": 84,
        "endChar": 28
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_529174f2",
        "filename": "avb/libavb/avb_util.h",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74d3c2eb_1245e14e",
      "range": {
        "startLine": 84,
        "startChar": 19,
        "endLine": 84,
        "endChar": 28
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b477fabf_893d49e8",
        "filename": "avb/libavb/avb_util.h",
        "patchSetId": 3
      },
      "lineNbr": 88,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "How about:\n  points into |haystack| for the first occurrence of needle.",
      "range": {
        "startLine": 88,
        "startChar": 40,
        "endLine": 88,
        "endChar": 62
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_729678ed",
        "filename": "avb/libavb/avb_util.h",
        "patchSetId": 3
      },
      "lineNbr": 88,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b477fabf_893d49e8",
      "range": {
        "startLine": 88,
        "startChar": 40,
        "endLine": 88,
        "endChar": 62
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_07504003",
        "filename": "avb/libavb/avb_util.h",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "occurrences",
      "range": {
        "startLine": 93,
        "startChar": 16,
        "endLine": 93,
        "endChar": 26
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_927afcc9",
        "filename": "avb/libavb/avb_util.h",
        "patchSetId": 3
      },
      "lineNbr": 93,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3464ea09_07504003",
      "range": {
        "startLine": 93,
        "startChar": 16,
        "endLine": 93,
        "endChar": 26
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14552639_3a381df6",
        "filename": "avb/libavb/avb_vbmeta_image.h",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "Should we add a separate enum for it? e.g.,   \n  AVB_VBMETA_VERIFY_PUBLIC_KEY_MISMATCH",
      "range": {
        "startLine": 174,
        "startChar": 52,
        "endLine": 175,
        "endChar": 13
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_72ad9835",
        "filename": "avb/libavb/avb_vbmeta_image.h",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "We don\u0027t know which one it is. The caller of avb_vbmeta_image_verify() however can check if the key stored in the header matches whatever is embedded in e.g. the boot loader.",
      "parentUuid": "14552639_3a381df6",
      "range": {
        "startLine": 174,
        "startChar": 52,
        "endLine": 175,
        "endChar": 13
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54e6be5a_c1b4229c",
        "filename": "avb/libavb/avb_vbmeta_image.h",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-04T10:55:02Z",
      "side": 1,
      "message": "OK, makes sense!",
      "parentUuid": "749bc27c_72ad9835",
      "range": {
        "startLine": 174,
        "startChar": 52,
        "endLine": 175,
        "endChar": 13
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d3c2eb_52ada934",
        "filename": "avb/libavb/avb_vbmeta_image.h",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "remove payload?",
      "range": {
        "startLine": 193,
        "startChar": 51,
        "endLine": 193,
        "endChar": 58
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_07eda08b",
        "filename": "avb/libavb/avb_vbmeta_image.h",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "three?",
      "range": {
        "startLine": 193,
        "startChar": 3,
        "endLine": 193,
        "endChar": 7
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_92a11c42",
        "filename": "avb/libavb/avb_vbmeta_image.h",
        "patchSetId": 3
      },
      "lineNbr": 193,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "Right. Version 1 of this code also had a payload block. Fixing.",
      "parentUuid": "74d3c2eb_52ada934",
      "range": {
        "startLine": 193,
        "startChar": 51,
        "endLine": 193,
        "endChar": 58
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_878c50e1",
        "filename": "avb/libavb/avb_vbmeta_image.h",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "Just to be clear, does it mean:\n  ... extract the key at build time, store it into the bootloader and compare it ... at run time.",
      "range": {
        "startLine": 209,
        "startChar": 11,
        "endLine": 209,
        "endChar": 55
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_b29e20f9",
        "filename": "avb/libavb/avb_vbmeta_image.h",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "Yes. I concede it\u0027s not very clear, I\u0027ll update it.",
      "parentUuid": "3464ea09_878c50e1",
      "range": {
        "startLine": 209,
        "startChar": 11,
        "endLine": 209,
        "endChar": 55
      },
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3464ea09_2791c4f3",
        "filename": "avb/libavb/avb_vbmeta_image.h",
        "patchSetId": 3
      },
      "lineNbr": 217,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-03T16:31:46Z",
      "side": 1,
      "message": "Should we add:\n  The read/write of the rollback_index in NVRAM is implemented in function read_rollback_index and write_rollback_index, respectively. \n  See avb_ops.h for details.",
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749bc27c_d29ba407",
        "filename": "avb/libavb/avb_vbmeta_image.h",
        "patchSetId": 3
      },
      "lineNbr": 217,
      "author": {
        "id": 1076971
      },
      "writtenOn": "2016-08-03T20:05:46Z",
      "side": 1,
      "message": "I would prefer not to. I like to think as this as a \"low-level\" function and that\u0027s why I\u0027m pointing to avb_slot_verify() below. Plumbing vs. porcelain, all that good stuff.",
      "parentUuid": "3464ea09_2791c4f3",
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54e6be5a_a1b91e94",
        "filename": "avb/libavb/avb_vbmeta_image.h",
        "patchSetId": 3
      },
      "lineNbr": 217,
      "author": {
        "id": 1080813
      },
      "writtenOn": "2016-08-04T10:55:02Z",
      "side": 1,
      "message": "OK, sounds good!",
      "parentUuid": "749bc27c_d29ba407",
      "revId": "f1e369f4c3633c956a069fa086afc0975c79e962",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}