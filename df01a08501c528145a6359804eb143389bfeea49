{
  "comments": [
    {
      "key": {
        "uuid": "469b0b75_a44b6638",
        "filename": "simpleperf/utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-05-22T02:34:38Z",
      "side": 1,
      "message": "why? why not just let the OpenArchiveFd fail?",
      "range": {
        "startLine": 79,
        "startChar": 3,
        "endLine": 87,
        "endChar": 3
      },
      "revId": "df01a08501c528145a6359804eb143389bfeea49",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23df2ca6_1864d718",
        "filename": "simpleperf/utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2018-05-22T18:32:17Z",
      "side": 1,
      "message": "Added comments. It is because OpenArchiveFd is slow at detecting invalid zip files, the detection usually happens at https://cs.corp.google.com/android/system/core/libziparchive/zip_archive.cc?type\u003dcs\u0026q\u003dkSignature+f:system/core/libziparchive+p:android\u0026g\u003d0\u0026l\u003d195. And simpleperf encounters much more invalid zip files than valid zip files.",
      "parentUuid": "469b0b75_a44b6638",
      "range": {
        "startLine": 79,
        "startChar": 3,
        "endLine": 87,
        "endChar": 3
      },
      "revId": "df01a08501c528145a6359804eb143389bfeea49",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c8b79e1_bd57da0d",
        "filename": "simpleperf/utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-05-22T18:36:30Z",
      "side": 1,
      "message": "interesting. i wonder if we should change libziparchive to do the quick check first (just to make it more generally useful, and because i like to disallow as many weird possibilities as i can, and i can\u0027t think why we\u0027d want liziparchive to allow zip files that didn\u0027t start with the right magic)?",
      "parentUuid": "23df2ca6_1864d718",
      "range": {
        "startLine": 79,
        "startChar": 3,
        "endLine": 87,
        "endChar": 3
      },
      "revId": "df01a08501c528145a6359804eb143389bfeea49",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67d61676_7fde91a4",
        "filename": "simpleperf/utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2018-05-22T18:51:17Z",
      "side": 1,
      "message": "hmmm... libziparchive is using the standard way to parse the zipfile: looking for EOCD, central directory, local files etc.\n\nWhile this 504b0304 is just a the magic for a local header; and a file can still be an zip file even if it doesn\u0027t start with a local header (e.g. empty zip, extra contents before the local header?) I am not against add an additional quick check function in libziparchive, but it\u0027s not universally true for parsing.",
      "parentUuid": "4c8b79e1_bd57da0d",
      "range": {
        "startLine": 79,
        "startChar": 3,
        "endLine": 87,
        "endChar": 3
      },
      "revId": "df01a08501c528145a6359804eb143389bfeea49",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c8fc5f3_9cb23854",
        "filename": "simpleperf/utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1003224
      },
      "writtenOn": "2018-05-22T18:58:24Z",
      "side": 1,
      "message": "yeah, it\u0027s just weird to me that we\u0027re lenient in code as security paranoid as libziparchive. (that\u0027s why i think if we make that change it should be done separately in case we need to revert.)",
      "parentUuid": "67d61676_7fde91a4",
      "range": {
        "startLine": 79,
        "startChar": 3,
        "endLine": 87,
        "endChar": 3
      },
      "revId": "df01a08501c528145a6359804eb143389bfeea49",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}