{
  "comments": [
    {
      "key": {
        "uuid": "5cf6894a_421bb459",
        "filename": "tests/netd/dns_responder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 1005480
      },
      "writtenOn": "2014-02-24T20:13:19Z",
      "side": 1,
      "message": "I\u0027m not sure the gTest should ever exit().\n\nIsn\u0027t there a better test failure like \"incomplete\"?",
      "range": {
        "startLine": 75,
        "startChar": 8,
        "endLine": 75,
        "endChar": 12
      },
      "revId": "17e7fd648cef53eb5ec9ce53c35b69a0efb8659e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c217195_75b66808",
        "filename": "tests/netd/dns_responder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 1003988
      },
      "writtenOn": "2014-02-24T21:38:48Z",
      "side": 1,
      "message": "To be gTest-compatible, it\u0027d need to use gTest macros, but none of them will actually abort the test case, unless the result is propagated up to the TEST_F block. I think aborting the whole suite is probably the smartest move here anyway, so I\u0027d rather exit here.\n\nFurthermore, TradeFederation runs GTEST tests via DDMS, and (judging from the source code) it does not seem to care about the return code. (I don\u0027t think DDMS is even capable of communicating shell return code.) The old testrunner executes \u0027%s 2\u003e\u00261;echo -n exit code:$?\u0027 in order to get the return code but only cares if it\u0027s \u00270\u0027 or not.\n\nFinally, I\u0027d prefer to keep gTest out of dns_responder.* though.",
      "parentUuid": "5cf6894a_421bb459",
      "range": {
        "startLine": 75,
        "startChar": 8,
        "endLine": 75,
        "endChar": 12
      },
      "revId": "17e7fd648cef53eb5ec9ce53c35b69a0efb8659e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cf89137_8638b0b3",
        "filename": "tests/netd/dns_responder.cpp",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 1005480
      },
      "writtenOn": "2014-02-24T22:47:49Z",
      "side": 1,
      "message": "Don\u0027t start() in the Responer().\nExplicitly call start() in each test, and check the return code.",
      "parentUuid": "1c217195_75b66808",
      "range": {
        "startLine": 75,
        "startChar": 8,
        "endLine": 75,
        "endChar": 12
      },
      "revId": "17e7fd648cef53eb5ec9ce53c35b69a0efb8659e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cf89137_203784c1",
        "filename": "tests/netd/resolver_test.cpp",
        "patchSetId": 4
      },
      "lineNbr": 158,
      "author": {
        "id": 1005480
      },
      "writtenOn": "2014-02-24T20:13:19Z",
      "side": 1,
      "message": "Android\u0027s bionic doesn\u0027t have endhostent(). But then again, doesn\u0027t bionic have some magic internal caching that handles all the connection stuff which would make endhostent()\u0027s work of closing descriptors unnecessary?",
      "range": {
        "startLine": 158,
        "startChar": 7,
        "endLine": 158,
        "endChar": 44
      },
      "revId": "17e7fd648cef53eb5ec9ce53c35b69a0efb8659e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c217195_354c7092",
        "filename": "tests/netd/resolver_test.cpp",
        "patchSetId": 4
      },
      "lineNbr": 158,
      "author": {
        "id": 1003988
      },
      "writtenOn": "2014-02-24T21:38:48Z",
      "side": 1,
      "message": "I read a bit more about this and AFAICT, endhostent is not necessary unless preceded by sethostent(1) (\u003d\u003d use TCP socket).",
      "parentUuid": "1cf89137_203784c1",
      "range": {
        "startLine": 158,
        "startChar": 7,
        "endLine": 158,
        "endChar": 44
      },
      "revId": "17e7fd648cef53eb5ec9ce53c35b69a0efb8659e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}