//
// Copyright (C) 2020 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

python_binary_host {
    name: "ota_from_raw_image",
    srcs: ["ota_from_raw_image.py",],
    required: [
        "brillo_update_payload",
    ],
}

// boot.img -> payload.bin
genrule_defaults {
    name: "boot_img_to_ota_payload_defaults",
    tools: ["ota_from_raw_image", "brillo_update_payload", "delta_generator"],
    out: ["payload.bin"],
    cmd: "$(location ota_from_raw_image) " +
         "--brillo_update_payload $(location brillo_update_payload) " +
         "--delta_generator $(location delta_generator) " +
         "--out $(out) " +
         "boot:$(in)",
}

// payload.bin -> payload_properties.txt
genrule_defaults {
    name: "ota_payload_to_properties_defaults",
    tools: ["brillo_update_payload", "delta_generator"],
    out: ["payload_properties.txt"],
    cmd: "GENERATOR=$(location delta_generator) $(location brillo_update_payload) properties --payload $(in) --properties $(out)",
}

apex_key {
    name: "com.android.gki.key",
    public_key: "com.android.gki.avbpubkey",
    private_key: "com.android.gki.pem",
}

sh_binary {
    name: "com.android.gki.preinstall",
    src: "preinstall.sh",
}

sh_binary {
    name: "com.android.gki.postinstall",
    src: "postinstall.sh",
}

apex_defaults {
    name: "com.android.gki_defaults",
    binaries: [
        "update_engine_stable_client",
        "com.android.gki.preinstall",
        "com.android.gki.postinstall",
    ],
    file_contexts: ":com.android.gki-file_contexts",
    // Key to sign image
    key: "com.android.gki.key",
    // Key to sign APEX. Left empty to use defaults.
    // certificate: "",
}

genrule_defaults {
    name: "com.android.gki_apex_manifest_defaults",
    out: ["apex_manifest.json"],
    tools: ["jsonmodify"],
    // Transform kernel release to KMI version + sublevel.
    // e.g. 5.4.42-android11-0 => name: "com.android.gki.kmi_5_4_android11_0", version: "42"
    // Note that the KMI version is read from the boot image, not from the statically defined
    // value; this allows apexer to check the declared value in makefiles versus the actual value
    // in boot image.
    // TODO(b/159842160): Once format is finalized, replace regex with the following:
    // sed -E 's/^([0-9]+[.][0-9]+)[.]([0-9]+)-(android[0-9]+)-([0-9]+).*$$/\\1_\\3_\\4/g'
    // sed -E 's/^([0-9]+[.][0-9]+)[.]([0-9]+)-(android[0-9]+)-([0-9]+).*$$/\\2/g'
    // For now, use hardcoded Android release and KMI generation.
    cmd: "echo '{}' | $(location jsonmodify) " +
         "-v name com.android.gki.kmi_$$(cat $(in) | sed -E 's/^([0-9]+[.][0-9]+)[.]([0-9]+).*$$/\\1_android12_0/g') " +
         "-v version                  $$(cat $(in) | sed -E 's/^([0-9]+[.][0-9]+)[.]([0-9]+).*$$/\\2/g') " +
         "-v preInstallHook bin/com.android.gki.preinstall " +
         "-v postInstallHook bin/com.android.gki.postinstall " +
         "> $(out)",
}

// Map $(PRODUCT_OUT)/boot.img to 5.4-android12-0.
// This can only be installed if BOARD_KERNEL_BINARIES is not set, or "kernel"
// is in BOARD_KERNEL_BINARIES.
gki_apex {
    name: "com.android.gki.boot_5.4-android12-0",
    product_out_path: "boot.img",
    kmi_version: "5.4-android12-0",
}

// Map $(PRODUCT_OUT)/boot-5.4.img to 5.4-android12-0.
// This can only be installed if "kernel-5.4" is in BOARD_KERNEL_BINARIES.
gki_apex {
    name: "com.android.gki.boot-5.4_5.4-android12-0",
    product_out_path: "boot-5.4.img",
    kmi_version: "5.4-android12-0",
}
