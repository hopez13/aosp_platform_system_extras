makefile_goal {
    name: "bootimage_soong",
    product_out_path: "boot.img",
}

python_binary_host {
    name: "ota_from_raw_image",
    srcs: ["ota_from_raw_image.py",],
    version: {
        py2: {
            enabled: false,
        },
        py3: {
            enabled: true,
        },
    },
}

// boot.img -> ota.zip
genrule {
    name: "bootimage_only_ota_gen",
    tools: ["ota_from_raw_image"],
    srcs: [":bootimage_soong"],
    out: ["ota.zip"],
    cmd: "$(location ota_from_raw_image) $(in) $(out)",
}

// unzip ota.zip payload.bin
genrule {
    name: "bootimage_only_ota_payload_gen",
    srcs: [":bootimage_only_ota_gen"],
    out: ["payload.bin"],
    cmd: "unzip -q $(in) -d $(genDir) $$(basename $(out))",
}

// copy payload.bin to <apex>/etc/ota
prebuilt_etc {
    name: "bootimage_only_ota_payload",
    src: ":bootimage_only_ota_payload_gen",
    filename_from_src: true,
    relative_install_path: "ota",
}

// unzip ota.zip payload_properties.txt
genrule {
    name: "bootimage_only_ota_payload_properties_gen",
    srcs: [":bootimage_only_ota_gen"],
    out: ["payload_properties.txt"],
    cmd: "unzip -q $(in) -d $(genDir) $$(basename $(out))",
}

// copy payload_properties.txt to <apex>/etc/ota
prebuilt_etc {
    name: "bootimage_only_ota_payload_properties",
    src: ":bootimage_only_ota_payload_properties_gen",
    filename_from_src: true,
    relative_install_path: "ota",
}
