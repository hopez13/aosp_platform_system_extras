{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e8ac9f4d_3f4ecc02",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 13,
      "author": {
        "id": 1978605
      },
      "writtenOn": "2024-08-21T17:13:18Z",
      "side": 1,
      "message": "Nit: Capitalize this.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 1
      },
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e7cb7da_7e2b7a7a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 13,
      "author": {
        "id": 3502236
      },
      "writtenOn": "2024-08-21T20:55:36Z",
      "side": 1,
      "message": "I fixed this, thank you.",
      "parentUuid": "e8ac9f4d_3f4ecc02",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 1
      },
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "147080bb_290b79a5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 19,
      "author": {
        "id": 1884365
      },
      "writtenOn": "2024-08-21T17:05:32Z",
      "side": 1,
      "message": "Remove this line, its duplicated",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 38
      },
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed5e4bc4_ffae269d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 19,
      "author": {
        "id": 3502236
      },
      "writtenOn": "2024-08-21T20:55:36Z",
      "side": 1,
      "message": "Removed this, thank you.",
      "parentUuid": "147080bb_290b79a5",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 38
      },
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f079aae4_8a742d03",
        "filename": "torq/command_executor.py",
        "patchSetId": 12
      },
      "lineNbr": 59,
      "author": {
        "id": 1884365
      },
      "writtenOn": "2024-08-21T17:05:32Z",
      "side": 1,
      "message": "There is no need to define the variable at the top since you are assigning a new value on each run.",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 59,
        "endChar": 65
      },
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36534095_5cb0414b",
        "filename": "torq/command_executor.py",
        "patchSetId": 12
      },
      "lineNbr": 59,
      "author": {
        "id": 1978605
      },
      "writtenOn": "2024-08-21T17:15:56Z",
      "side": 1,
      "message": "I think that we need to handle the case where we open the trace at the end, which exists outside of the for loop.",
      "parentUuid": "f079aae4_8a742d03",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 59,
        "endChar": 65
      },
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14e14f68_89b7a315",
        "filename": "torq/command_executor.py",
        "patchSetId": 12
      },
      "lineNbr": 59,
      "author": {
        "id": 3502236
      },
      "writtenOn": "2024-08-21T21:24:02Z",
      "side": 1,
      "message": "We need it because we also need to refer to it outside of the loop if it is",
      "parentUuid": "36534095_5cb0414b",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 59,
        "endChar": 65
      },
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7862a390_3db5e7e5",
        "filename": "torq/command_executor.py",
        "patchSetId": 12
      },
      "lineNbr": 59,
      "author": {
        "id": 3502236
      },
      "writtenOn": "2024-08-21T21:24:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14e14f68_89b7a315",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 59,
        "endChar": 65
      },
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33070121_fd2b24a1",
        "filename": "torq/tests/command_executor_unit_test.py",
        "patchSetId": 12
      },
      "lineNbr": 46,
      "author": {
        "id": 1884365
      },
      "writtenOn": "2024-08-21T17:05:32Z",
      "side": 1,
      "message": "If we are unit testing ProfilerCommandExecutor then we shouldn\u0027t be mocking any methods in ProfilerCommandExecutor. I think we missed this on the previous CL.\n\nIf we are only testing the commands implemented in CommandExecutor, then we should be testing that class instead.",
      "range": {
        "startLine": 42,
        "startChar": 2,
        "endLine": 46,
        "endChar": 35
      },
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e83cda66_9926d70f",
        "filename": "torq/tests/command_executor_unit_test.py",
        "patchSetId": 12
      },
      "lineNbr": 46,
      "author": {
        "id": 3502236
      },
      "writtenOn": "2024-08-21T20:55:36Z",
      "side": 1,
      "message": "We removed this in another cl.",
      "parentUuid": "33070121_fd2b24a1",
      "range": {
        "startLine": 42,
        "startChar": 2,
        "endLine": 46,
        "endChar": 35
      },
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f694fdb_cb167c53",
        "filename": "torq/tests/command_executor_unit_test.py",
        "patchSetId": 12
      },
      "lineNbr": 71,
      "author": {
        "id": 1978605
      },
      "writtenOn": "2024-08-21T17:13:18Z",
      "side": 1,
      "message": "Can you please create a bug to replace these mocks of the class under test. Ideally, we should be mocking some other dependency, such as the Device class in this case.",
      "range": {
        "startLine": 71,
        "startChar": 21,
        "endLine": 71,
        "endChar": 44
      },
      "fixSuggestions": [
        {
          "fixId": "bc164c3c_e9b93a94",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 73,
                "startChar": 0,
                "endLine": 73,
                "endChar": 0
              },
              "replacement": "  # TODO(b/289251111): Replace mocks of the class under test.\n"
            }
          ]
        }
      ],
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "818684e3_23183b5b",
        "filename": "torq/tests/command_executor_unit_test.py",
        "patchSetId": 12
      },
      "lineNbr": 71,
      "author": {
        "id": 3502236
      },
      "writtenOn": "2024-08-21T20:55:36Z",
      "side": 1,
      "message": "We implemented this in another cl.",
      "parentUuid": "9f694fdb_cb167c53",
      "range": {
        "startLine": 71,
        "startChar": 21,
        "endLine": 71,
        "endChar": 44
      },
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b3697a3_ef5f7c0a",
        "filename": "torq/tests/command_executor_unit_test.py",
        "patchSetId": 12
      },
      "lineNbr": 78,
      "author": {
        "id": 1978605
      },
      "writtenOn": "2024-08-21T17:13:18Z",
      "side": 1,
      "message": "Could we create this mock in one line, by passing in the constructor arguments.\n\nSame elsewhere.",
      "range": {
        "startLine": 75,
        "startChar": 4,
        "endLine": 78,
        "endChar": 31
      },
      "fixSuggestions": [
        {
          "fixId": "68861cea_b9dbafbf",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 50,
                "startChar": 0,
                "endLine": 54,
                "endChar": 0
              },
              "replacement": "    mock_command \u003d mock.create_autospec(ProfilerCommand, instance\u003dTrue,\n        runs\u003d1, use_ui\u003dFalse, out_dir\u003dDEFAULT_OUT_DIR)\n"
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 75,
                "startChar": 0,
                "endLine": 79,
                "endChar": 0
              },
              "replacement": "    mock_command \u003d mock.create_autospec(ProfilerCommand, instance\u003dTrue,\n        runs\u003d1, use_ui\u003dFalse, out_dir\u003dDEFAULT_OUT_DIR)\n"
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 117,
                "startChar": 0,
                "endLine": 120,
                "endChar": 0
              },
              "replacement": "    mock_command \u003d mock.create_autospec(ProfilerCommand, instance\u003dTrue,\n        runs\u003d1, out_dir\u003dDEFAULT_OUT_DIR)\n"
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 135,
                "startChar": 0,
                "endLine": 138,
                "endChar": 0
              },
              "replacement": "    mock_command \u003d mock.create_autospec(ProfilerCommand, instance\u003dTrue,\n        runs\u003d1, out_dir\u003dDEFAULT_OUT_DIR)\n"
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 156,
                "startChar": 0,
                "endLine": 159,
                "endChar": 0
              },
              "replacement": "    mock_command \u003d mock.create_autospec(ProfilerCommand, instance\u003dTrue,\n        runs\u003d1, out_dir\u003dDEFAULT_OUT_DIR)\n"
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 179,
                "startChar": 0,
                "endLine": 182,
                "endChar": 0
              },
              "replacement": "    mock_command \u003d mock.create_autospec(ProfilerCommand, instance\u003dTrue,\n        runs\u003d1, out_dir\u003dDEFAULT_OUT_DIR)\n"
            }
          ]
        }
      ],
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa153665_67dbc5b8",
        "filename": "torq/tests/command_executor_unit_test.py",
        "patchSetId": 12
      },
      "lineNbr": 78,
      "author": {
        "id": 3502236
      },
      "writtenOn": "2024-08-21T20:55:36Z",
      "side": 1,
      "message": "This no longer applies to the new code from the other cl.",
      "parentUuid": "2b3697a3_ef5f7c0a",
      "range": {
        "startLine": 75,
        "startChar": 4,
        "endLine": 78,
        "endChar": 31
      },
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6087eec6_67297a4e",
        "filename": "torq/tests/command_executor_unit_test.py",
        "patchSetId": 12
      },
      "lineNbr": 85,
      "author": {
        "id": 1978605
      },
      "writtenOn": "2024-08-21T17:13:18Z",
      "side": 1,
      "message": "We can just inline this since it is only used once.",
      "range": {
        "startLine": 83,
        "startChar": 4,
        "endLine": 85,
        "endChar": 63
      },
      "fixSuggestions": [
        {
          "fixId": "94cb4155_144f88e2",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 60,
                "startChar": 0,
                "endLine": 61,
                "endChar": 0
              },
              "replacement": ""
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 62,
                "startChar": 0,
                "endLine": 63,
                "endChar": 0
              },
              "replacement": "    error \u003d ProfilerCommandExecutor().execute_command(mock_command, MOCK_DEVICE)\n"
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 83,
                "startChar": 0,
                "endLine": 84,
                "endChar": 0
              },
              "replacement": ""
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 85,
                "startChar": 0,
                "endLine": 86,
                "endChar": 0
              },
              "replacement": "    error \u003d ProfilerCommandExecutor().execute_command(mock_command, MOCK_DEVICE)\n"
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 92,
                "startChar": 0,
                "endLine": 93,
                "endChar": 0
              },
              "replacement": ""
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 94,
                "startChar": 0,
                "endLine": 95,
                "endChar": 0
              },
              "replacement": "    error \u003d ProfilerCommandExecutor().execute_command(mock_command, MOCK_DEVICE)\n"
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 105,
                "startChar": 0,
                "endLine": 106,
                "endChar": 0
              },
              "replacement": ""
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 107,
                "startChar": 0,
                "endLine": 108,
                "endChar": 0
              },
              "replacement": "    error \u003d ProfilerCommandExecutor().execute_command(mock_command, MOCK_DEVICE)\n"
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 122,
                "startChar": 0,
                "endLine": 123,
                "endChar": 0
              },
              "replacement": ""
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 124,
                "startChar": 0,
                "endLine": 125,
                "endChar": 0
              },
              "replacement": "    error \u003d ProfilerCommandExecutor().execute_command(mock_command, MOCK_DEVICE)\n"
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 141,
                "startChar": 0,
                "endLine": 142,
                "endChar": 0
              },
              "replacement": ""
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 143,
                "startChar": 0,
                "endLine": 144,
                "endChar": 0
              },
              "replacement": "    error \u003d ProfilerCommandExecutor().execute_command(mock_command, MOCK_DEVICE)\n"
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 163,
                "startChar": 0,
                "endLine": 164,
                "endChar": 0
              },
              "replacement": ""
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 165,
                "startChar": 0,
                "endLine": 166,
                "endChar": 0
              },
              "replacement": "    error \u003d ProfilerCommandExecutor().execute_command(mock_command, MOCK_DEVICE)\n"
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 187,
                "startChar": 0,
                "endLine": 188,
                "endChar": 0
              },
              "replacement": ""
            },
            {
              "path": "torq/tests/command_executor_unit_test.py",
              "range": {
                "startLine": 189,
                "startChar": 0,
                "endLine": 190,
                "endChar": 0
              },
              "replacement": "    error \u003d ProfilerCommandExecutor().execute_command(mock_command, MOCK_DEVICE)\n"
            }
          ]
        }
      ],
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bacfbab3_2a956081",
        "filename": "torq/tests/command_executor_unit_test.py",
        "patchSetId": 12
      },
      "lineNbr": 85,
      "author": {
        "id": 3502236
      },
      "writtenOn": "2024-08-21T20:55:36Z",
      "side": 1,
      "message": "This no longer applies to the new code from the other cl.",
      "parentUuid": "6087eec6_67297a4e",
      "range": {
        "startLine": 83,
        "startChar": 4,
        "endLine": 85,
        "endChar": 63
      },
      "revId": "8a5e5e317160ea6ff43c9218665e95061e8eaf0e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}