{
  "comments": [
    {
      "key": {
        "uuid": "fa564b1e_b4197784",
        "filename": "verity/hash_tree_builder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2018-07-24T21:57:49Z",
      "side": 1,
      "message": "Seems like a leak (already existed prior to this change though). Just make it a stack variable?",
      "range": {
        "startLine": 78,
        "startChar": 2,
        "endLine": 78,
        "endChar": 12
      },
      "revId": "9fdc66fb3c24b2e46fa0cbc16cf64baccb4daadf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55ffb63c_e0dfcec9",
        "filename": "verity/hash_tree_builder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2018-07-24T22:42:17Z",
      "side": 1,
      "message": "the memory is allocated in the BN_hex2bn. Add a guard to address the leak.",
      "parentUuid": "fa564b1e_b4197784",
      "range": {
        "startLine": 78,
        "startChar": 2,
        "endLine": 78,
        "endChar": 12
      },
      "revId": "9fdc66fb3c24b2e46fa0cbc16cf64baccb4daadf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c7112f2_d16e567e",
        "filename": "verity/hash_tree_builder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2018-07-24T22:45:22Z",
      "side": 1,
      "message": "// BN_hex2bn parses the leading hex number from |in|, which may be proceeded by\n// a \u0027-\u0027 to indicate a negative number and may contain trailing, non-hex data.\n// If |outp| is not NULL, it constructs a BIGNUM equal to the hex number and\n// stores it in |*outp|. If |*outp| is NULL then it allocates a new BIGNUM and\n// updates |*outp|. It returns the number of bytes of |in| processed or zero on\n// error.\nOPENSSL_EXPORT int BN_hex2bn(BIGNUM **outp, const char *in);",
      "parentUuid": "55ffb63c_e0dfcec9",
      "range": {
        "startLine": 78,
        "startChar": 2,
        "endLine": 78,
        "endChar": 12
      },
      "revId": "9fdc66fb3c24b2e46fa0cbc16cf64baccb4daadf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "053bccd0_416da890",
        "filename": "verity/hash_tree_builder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2018-07-24T22:54:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c7112f2_d16e567e",
      "range": {
        "startLine": 78,
        "startChar": 2,
        "endLine": 78,
        "endChar": 12
      },
      "revId": "9fdc66fb3c24b2e46fa0cbc16cf64baccb4daadf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "154e7c42_68dcba21",
        "filename": "verity/hash_tree_builder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1056365
      },
      "writtenOn": "2018-07-24T23:18:39Z",
      "side": 1,
      "message": "Sorry I was misleading. I initially thought managing \u0027bn\u0027 in the caller (i.e. this function) based on that function comment, but realized it needs to be allocated via BN_new(). Putting bn in a std::unique_ptr\u003cBIGNUM\u003e would also look bad, as BN_hex2bn() expects BIGNUM**. Maybe PS4 is the one to go.",
      "parentUuid": "053bccd0_416da890",
      "range": {
        "startLine": 78,
        "startChar": 2,
        "endLine": 78,
        "endChar": 12
      },
      "revId": "9fdc66fb3c24b2e46fa0cbc16cf64baccb4daadf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71fd088c_ba5091fc",
        "filename": "verity/hash_tree_builder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1079733
      },
      "writtenOn": "2018-07-24T23:59:56Z",
      "side": 1,
      "message": "Using BIGNUM for this still seems weird to me, not sure if this can depend on libchrome, but if yes then you can just use base::HexStringToBytes()",
      "parentUuid": "154e7c42_68dcba21",
      "range": {
        "startLine": 78,
        "startChar": 2,
        "endLine": 78,
        "endChar": 12
      },
      "revId": "9fdc66fb3c24b2e46fa0cbc16cf64baccb4daadf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8bb1abb_4d64be81",
        "filename": "verity/hash_tree_builder.cpp",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1088085
      },
      "writtenOn": "2018-07-25T00:24:44Z",
      "side": 1,
      "message": "that will cause non-A/B to depend on libchrome then.. let\u0027s keep the old implementation now and maybe copy libchrome\u0027s implementation here in the future.",
      "parentUuid": "71fd088c_ba5091fc",
      "range": {
        "startLine": 78,
        "startChar": 2,
        "endLine": 78,
        "endChar": 12
      },
      "revId": "9fdc66fb3c24b2e46fa0cbc16cf64baccb4daadf",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": false
    }
  ]
}