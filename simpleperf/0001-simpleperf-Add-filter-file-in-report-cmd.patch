From 978efe75db2df2760f4d7015e48dd4400212273e Mon Sep 17 00:00:00 2001
From: Yabin Cui <yabinc@google.com>
Date: Thu, 6 Jan 2022 15:41:31 -0800
Subject: [PATCH] simpleperf: Add --filter-file in report cmd.

The option can pass a filter file to report cmd, which can filter
samples based on timestamps.

Bug: 211814099
Test: run simpleperf_unit_test
Change-Id: If4f7a1f7d02288110570cf2bf723fddffd109c37
---
 simpleperf/RecordFilter.cpp    |  5 +++++
 simpleperf/RecordFilter.h      |  8 +++++++-
 simpleperf/cmd_report.cpp      | 13 ++++++++++---
 simpleperf/cmd_report_test.cpp | 18 ++++++++++++++++++
 4 files changed, 40 insertions(+), 4 deletions(-)

diff --git a/simpleperf/RecordFilter.cpp b/simpleperf/RecordFilter.cpp
index d5758dda..b97f0dd3 100644
--- a/simpleperf/RecordFilter.cpp
+++ b/simpleperf/RecordFilter.cpp
@@ -276,6 +276,11 @@ bool RecordFilter::ParseOptions(OptionValueMap& options) {
       }
     }
   }
+  if (auto value = options.PullValue("--filter-file"); value) {
+    if (!SetFilterFile(*value->str_value)) {
+      return false;
+    }
+  }
   return true;
 }
 
diff --git a/simpleperf/RecordFilter.h b/simpleperf/RecordFilter.h
index 94805ff7..4c5ee584 100644
--- a/simpleperf/RecordFilter.h
+++ b/simpleperf/RecordFilter.h
@@ -59,7 +59,9 @@ namespace simpleperf {
   "--include-process-name process_name_regex   Include samples for processes with name\n"          \
   "                                            containing the regular expression.\n"               \
   "--include-thread-name thread_name_regex     Include samples for threads with name containing\n" \
-  "                                            the regular expression.\n"
+  "                                            the regular expression.\n"                          \
+  "--filter-file <file>          Use filter file to filter samples based on timestamps. The\n"     \
+  "                              file format is in doc/sampler_filter.md.\n"
 
 inline OptionFormatMap GetRecordFilterOptionFormats(bool for_recording) {
   OptionFormatMap option_formats = {
@@ -83,6 +85,10 @@ inline OptionFormatMap GetRecordFilterOptionFormats(bool for_recording) {
     option_formats.emplace(
         "--include-uid",
         OptionFormat({OptionValueType::STRING, OptionType::MULTIPLE, AppRunnerType::ALLOWED}));
+  } else {
+    option_formats.emplace(
+        "--filter-file",
+        OptionFormat({OptionValueType::STRING, OptionType::SINGLE, AppRunnerType::ALLOWED}));
   }
   return option_formats;
 }
diff --git a/simpleperf/cmd_report.cpp b/simpleperf/cmd_report.cpp
index 89b0b33b..560e1ffa 100644
--- a/simpleperf/cmd_report.cpp
+++ b/simpleperf/cmd_report.cpp
@@ -481,7 +481,7 @@ RECORD_FILTER_OPTION_HELP_MSG_FOR_REPORTING
  private:
   bool ParseOptions(const std::vector<std::string>& args);
   bool BuildSampleComparatorAndDisplayer();
-  void ReadMetaInfoFromRecordFile();
+  bool ReadMetaInfoFromRecordFile();
   bool ReadEventAttrFromRecordFile();
   bool ReadFeaturesFromRecordFile();
   bool ReadSampleTreeFromRecordFile();
@@ -535,7 +535,9 @@ bool ReportCommand::Run(const std::vector<std::string>& args) {
   if (record_file_reader_ == nullptr) {
     return false;
   }
-  ReadMetaInfoFromRecordFile();
+  if (!ReadMetaInfoFromRecordFile()) {
+    return false;
+  }
   if (!ReadEventAttrFromRecordFile()) {
     return false;
   }
@@ -845,11 +847,16 @@ bool ReportCommand::BuildSampleComparatorAndDisplayer() {
   return true;
 }
 
-void ReportCommand::ReadMetaInfoFromRecordFile() {
+bool ReportCommand::ReadMetaInfoFromRecordFile() {
   auto& meta_info = record_file_reader_->GetMetaInfoFeature();
   if (auto it = meta_info.find("trace_offcpu"); it != meta_info.end()) {
     trace_offcpu_ = it->second == "true";
   }
+  std::string clock = "perf";
+  if (auto it = meta_info.find("clockid"); it != meta_info.end()) {
+    clock = it->second;
+  }
+  return record_filter_.CheckClock(clock);
 }
 
 bool ReportCommand::ReadEventAttrFromRecordFile() {
diff --git a/simpleperf/cmd_report_test.cpp b/simpleperf/cmd_report_test.cpp
index 1744322b..331ac9df 100644
--- a/simpleperf/cmd_report_test.cpp
+++ b/simpleperf/cmd_report_test.cpp
@@ -23,6 +23,7 @@
 #include <android-base/file.h>
 #include <android-base/parseint.h>
 #include <android-base/strings.h>
+#include <android-base/test_utils.h>
 
 #include "command.h"
 #include "get_test_data.h"
@@ -635,6 +636,23 @@ TEST_F(ReportCommandTest, exclude_include_thread_name_options) {
   ASSERT_TRUE(AllItemsWithString(lines, {"t1"}));
 }
 
+TEST_F(ReportCommandTest, filter_file_option) {
+  std::string filter_data =
+      "GLOBAL_BEGIN 684943449406175\n"
+      "GLOBAL_END 684943449406175";
+  TemporaryFile tmpfile;
+  ASSERT_TRUE(android::base::WriteStringToFd(filter_data, tmpfile.fd));
+  Report("perf_display_bitmaps.data", {"--filter-file", tmpfile.path});
+  ASSERT_TRUE(success);
+  ASSERT_EQ(GetSampleCount(), 1);
+
+  // PERF_DATA uses clock perf, which doesn't match the default clock in filter data.
+  CapturedStderr capture;
+  ASSERT_FALSE(ReportCmd()->Run({"-i", GetTestData(PERF_DATA), "--filter-file", tmpfile.path}));
+  capture.Stop();
+  ASSERT_NE(capture.str().find("doesn't match clock used in time filter"), std::string::npos);
+}
+
 #if defined(__linux__)
 #include "event_selection_set.h"
 
-- 
2.34.1.448.ga2b2bfdf31-goog

