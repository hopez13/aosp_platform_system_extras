{
  "comments": [
    {
      "key": {
        "uuid": "2fd9b635_80ee8074",
        "filename": "libfscrypt/fscrypt.cpp",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2020-05-21T17:28:30Z",
      "side": 1,
      "message": "This is overloading the word \"policy\", which is already used in \"encryption policy\".  I\u0027ve been writing \"IV generation method\".  How about:\n\n    // IV generation methods are mutually exclusive\n    int iv_methods \u003d 0;\n    iv_methods +\u003d !!(options-\u003eflags \u0026 FSCRYPT_POLICY_FLAG_IV_INO_LBLK_64);\n    iv_methods +\u003d !!(options-\u003eflags \u0026 FSCRYPT_POLICY_FLAG_IV_INO_LBLK_32);\n    iv_methods +\u003d !!(options-\u003eflags \u0026 FSCRYPT_POLICY_FLAG_DIRECT_KEY);\n    if (iv_methods \u003e 1) {\n        LOG(ERROR) \u003c\u003c \"At most one IV generation method can be set, invalid options: \" \u003c\u003c options_string;\n        return false;\n    }\n\n`iv_flags` would also be okay.",
      "range": {
        "startLine": 258,
        "startChar": 8,
        "endLine": 258,
        "endChar": 19
      },
      "revId": "a0bc602c951a61525c225688e7ff6ed84728c874",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efcb2531_af835587",
        "filename": "libfscrypt/include/fscrypt/fscrypt.h",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1137063
      },
      "writtenOn": "2020-05-21T17:28:30Z",
      "side": 1,
      "message": "#ifndef",
      "range": {
        "startLine": 22,
        "startChar": 1,
        "endLine": 22,
        "endChar": 13
      },
      "revId": "a0bc602c951a61525c225688e7ff6ed84728c874",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}