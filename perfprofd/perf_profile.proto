
syntax = "proto2";

option java_package = "com.google.common.logging";

// Derived from logs/proto/wireless/android/play/playlog/perf_profile.proto;
// Must be kept in sync with google3 version

package wireless_android_play_playlog;

// An entry of the map from a stack of addresses to count.
// Address here is the offset of the instruction address to the load address
// of the load_module.
message AddressSample {
  // List of addresses that represents a call stack.
  // address[0] is the leaf of the call stack.
  repeated uint64 address = 1;

  // Total count that the address/address_range is sampled.
  optional int64 count = 2;
};

// An entry of the map from address_range to count.
// [start, end] represents the range of addresses, end->to represents the
// taken branch that ends the range.
message RangeSample {
  // Start instruction address of a range.
  optional uint64 start = 1;

  // If "end" and "to" is not provided, "start" represents a single instruction.
  optional uint64 end = 2;
  optional uint64 to = 3;

  // Total count that the address/address_range is sampled.
  optional int64 count = 4;
};

// All samples for a load_module.
message LoadModuleSamples {
  // Name of the load_module.
  optional string name = 1;

  // LoadModule's linker build_id.
  optional string build_id = 2;

  // True if the load_module is kernel.
  optional bool is_kernel = 3;

  // Map from a single address to count.
  repeated AddressSample address_samples = 4;

  // Map from a range triplet (start, end, to) to count.
  repeated RangeSample range_samples = 5;
}

// A compressed representation of a perf profile, which contains samples from
// multiple binaries.
message AndroidPerfProfile {

  // Type of the hardware event.
  enum EventType {
    CYCLE = 0;
    BRANCH = 1;
  }
  // Hardware event used in profiling.
  optional EventType event = 1;

  // Total number of samples in this profile.
  // This is the sum of counts of address_samples and range_samples in all
  // load_module_samples.
  optional int64 total_samples = 2;

  // Samples for all profiled binaries.
  repeated LoadModuleSamples load_module_samples = 3;
}
