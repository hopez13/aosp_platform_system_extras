{
  "comments": [
    {
      "key": {
        "uuid": "0fd0fa5e_d575625c",
        "filename": "simpleperf/cmd_report.cpp",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2019-05-06T21:01:21Z",
      "side": 1,
      "message": "Are these \"int\" to prevent a bunch of churn to thread_tree? In quite a few places, these end up getting cast to uint32_t as well. I\u0027ll also note that these get printed as %d, which is maybe not helpful in the case where it is actually a negative integer value (although maybe that doesn\u0027t happen in practice).",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 65,
        "endChar": 5
      },
      "revId": "d8631ab6b016cbc1a5fcfb207081e53b0d125920",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d672a405_fdce2222",
        "filename": "simpleperf/cmd_report.cpp",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2019-05-06T21:59:59Z",
      "side": 1,
      "message": "Unfortunately, simpleperf uses three different types for pids/tids:\n  pid_t: normal type to define a thread id on linux.\n  int: on linux, pid_t is really int on linux.\n  uint32_t: used in records dumped from the kernel, like https://github.com/torvalds/linux/blob/master/include/uapi/linux/perf_event.h#L715.\n\nI tried to use pid_t as much as possible. But I met a problem when trying to use pid_t here:\non windows clang defines pid_t as long long, and need %lld to print it, but on linux it\u0027s %d.\nSo I just used int here.\nBut now I think I can use pid_t here, and static_cast to int when printing it.",
      "parentUuid": "0fd0fa5e_d575625c",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 65,
        "endChar": 5
      },
      "revId": "d8631ab6b016cbc1a5fcfb207081e53b0d125920",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72605d30_a8fcabf6",
        "filename": "simpleperf/cmd_report.cpp",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1010056
      },
      "writtenOn": "2019-05-06T22:26:18Z",
      "side": 1,
      "message": "Does printing it as a signed int make sense though? Should it be casting to unsigned and printing that?",
      "parentUuid": "d672a405_fdce2222",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 65,
        "endChar": 5
      },
      "revId": "d8631ab6b016cbc1a5fcfb207081e53b0d125920",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "263799f5_0da4ecd3",
        "filename": "simpleperf/cmd_report.cpp",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2019-05-06T23:35:22Z",
      "side": 1,
      "message": "1. It\u0027s posix standard and linux kernel decide to use pid_t(int) to represent a thread id.\n\n2. I don\u0027t know why perf records decide to use u32 instead of int to store thread ids. I guess they also think it shouldn\u0027t be negative. But since the kernel uses int for thread ids internally, it\u0027s always safe to use %d to print a reasonable thread id.\n\n3. If in some error cases, the thread id is negative. It\u0027s better for debugging to print it as a negative number instead of a big positive number.",
      "parentUuid": "72605d30_a8fcabf6",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 65,
        "endChar": 5
      },
      "revId": "d8631ab6b016cbc1a5fcfb207081e53b0d125920",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}