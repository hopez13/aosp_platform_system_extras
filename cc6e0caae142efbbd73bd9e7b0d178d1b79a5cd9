{
  "comments": [
    {
      "key": {
        "uuid": "4388c228_79ad8774",
        "filename": "simpleperf/simpleperf_app_runner/simpleperf_app_runner.cpp",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2019-01-23T00:12:20Z",
      "side": 1,
      "message": "simpleperf_app_runner knows the app intended to be invoked, no? It\u0027s argv[2] when simpleperf_app_runner is invoked. Does this need to be passed through?",
      "range": {
        "startLine": 108,
        "startChar": 6,
        "endLine": 108,
        "endChar": 13
      },
      "revId": "cc6e0caae142efbbd73bd9e7b0d178d1b79a5cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45e2763e_f3c0e570",
        "filename": "simpleperf/simpleperf_app_runner/simpleperf_app_runner.cpp",
        "patchSetId": 5
      },
      "lineNbr": 108,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2019-01-23T01:22:10Z",
      "side": 1,
      "message": "It is needed by simpleperf to know which app to profile. Changed to let simpleperf_app_runner put the option.",
      "parentUuid": "4388c228_79ad8774",
      "range": {
        "startLine": 108,
        "startChar": 6,
        "endLine": 108,
        "endChar": 13
      },
      "revId": "cc6e0caae142efbbd73bd9e7b0d178d1b79a5cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07bdc26e_ca8e7af2",
        "filename": "simpleperf/simpleperf_app_runner/simpleperf_app_runner.cpp",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2019-01-23T00:12:20Z",
      "side": 1,
      "message": "--tracepoint-events takes a filename and treats that data as events. It seems possible to pass in a malformed --tracepoint-events command line and have simpleperf read a file it wouldn\u0027t normally attempt to read. This could result in leaking out application data from the app.",
      "range": {
        "startLine": 110,
        "startChar": 45,
        "endLine": 110,
        "endChar": 66
      },
      "revId": "cc6e0caae142efbbd73bd9e7b0d178d1b79a5cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07560d0f_9a8cfa31",
        "filename": "simpleperf/simpleperf_app_runner/simpleperf_app_runner.cpp",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2019-01-23T00:12:20Z",
      "side": 1,
      "message": "I\u0027m a bit nervous about this option, as there doesn\u0027t seem to be any sanity checking on the provided directory. This differs from a lot of the other arguments in that it takes a string as opposed to an integer or other constrained value.\n\nWhat happens if someone passes a string like /proc/self/fd as --symfs?",
      "range": {
        "startLine": 110,
        "startChar": 28,
        "endLine": 110,
        "endChar": 37
      },
      "revId": "cc6e0caae142efbbd73bd9e7b0d178d1b79a5cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f51a7f97_5bd978c1",
        "filename": "simpleperf/simpleperf_app_runner/simpleperf_app_runner.cpp",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2019-01-23T01:22:10Z",
      "side": 1,
      "message": "--symfs gives a directory name to read symbols. If it isn\u0027t a directory or a directory can\u0027t read by simpleperf running in app\u0027s context, the process reports the error and exits.\n\nsimpleperf uses symfs as below:\nFor each sample, the sample ip is mapped to dso_path[+vaddr] by using /proc/pid/maps. Then simpleperf looks for executables under symfs having the same build id as dso_path. If found, it read symbol tables of the executable, and get symbol name of the sample ip.\n\nIf someone passes /proc/self/fd, simpleperf will read all files under it to collect build ids. And read symbol tables of files having the same build ids as hit by samples.",
      "parentUuid": "07560d0f_9a8cfa31",
      "range": {
        "startLine": 110,
        "startChar": 28,
        "endLine": 110,
        "endChar": 37
      },
      "revId": "cc6e0caae142efbbd73bd9e7b0d178d1b79a5cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f533f36c_28dbb6ef",
        "filename": "simpleperf/simpleperf_app_runner/simpleperf_app_runner.cpp",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2019-01-23T01:22:10Z",
      "side": 1,
      "message": "simpleperf runs in app\u0027s context. If it is given a file it can\u0027t read, it reports the error.\ntracepoint-events file is in special format, so if given an app_data_file path, it is unlikely to parse.\nthe content of tracepoint-events file is used as an protocol to communicate with linux kernel. linux kernel with check if it is valid or can be sampled by simpleperf process.\n\nSo I think it will not leak application data. no?",
      "parentUuid": "07bdc26e_ca8e7af2",
      "range": {
        "startLine": 110,
        "startChar": 45,
        "endLine": 110,
        "endChar": 66
      },
      "revId": "cc6e0caae142efbbd73bd9e7b0d178d1b79a5cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "327c57ec_d324fd19",
        "filename": "simpleperf/simpleperf_app_runner/simpleperf_app_runner.cpp",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2019-01-23T21:46:13Z",
      "side": 1,
      "message": "Here are a few things I figured out how to do so far:\n\n1) Probe for the existence or non-existence of a file, leaking application metadata (file existence).\n\n  $ simpleperf record --tracepoint-events /dev/null/asdf                                                                                           \n  simpleperf E event_type.cpp:45] Failed to read /dev/null/asdf: Not a directory\n\n  vs\n\n  $ simpleperf record --tracepoint-events /dev/null                                                                                    \n  simpleperf E cmd_record.cpp:435] No threads to monitor. Try `simpleperf help record` for help\n\n2) Crash the device and / or application:\n\n  simpleperf record --tracepoint-events /dev/urandom\n  (device reboot)\n\nYou are correct that it\u0027s hard to find a file which exactly matches the pattern that --tracepoint-events is looking for. However, I\u0027d prefer to be more robust and have a provable guarantee that only files from a whitelist can be supplied to the --tracepoint-events command line. I\u0027m surprised we can\u0027t do this...",
      "parentUuid": "f533f36c_28dbb6ef",
      "range": {
        "startLine": 110,
        "startChar": 45,
        "endLine": 110,
        "endChar": 66
      },
      "revId": "cc6e0caae142efbbd73bd9e7b0d178d1b79a5cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c727bf3e_6f0265e3",
        "filename": "simpleperf/simpleperf_app_runner/simpleperf_app_runner.cpp",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2019-01-23T21:46:13Z",
      "side": 1,
      "message": "When simpleperf_app_runner invokes simpleperf, I wouldn\u0027t expect the symbols to be in the application home directory. What directory is passed here then? I guess I don\u0027t understand the workflow.",
      "parentUuid": "f51a7f97_5bd978c1",
      "range": {
        "startLine": 110,
        "startChar": 28,
        "endLine": 110,
        "endChar": 37
      },
      "revId": "cc6e0caae142efbbd73bd9e7b0d178d1b79a5cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe16dc05_b8b54c35",
        "filename": "simpleperf/simpleperf_app_runner/simpleperf_app_runner.cpp",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2019-01-23T23:22:51Z",
      "side": 1,
      "message": "The directory is expected to be in /data/local/tmp, with unstripped shared libraries downloaded via adb push. The unstripped shared libraries can provide more debug info and symbol info than stripped versions shipped in apk. The workflow is below:\n1) user or script pushes unstripped shared libraries on device in /data/local/tmp/native_libs directory.\n2) use simpleperf record with --symfs /data/local/tmp/native_libs.\n\nThe first step and --symfs option is optional.\n\nLimit it to come from /data/local/tmp.",
      "parentUuid": "c727bf3e_6f0265e3",
      "range": {
        "startLine": 110,
        "startChar": 28,
        "endLine": 110,
        "endChar": 37
      },
      "revId": "cc6e0caae142efbbd73bd9e7b0d178d1b79a5cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eff34903_de0addfc",
        "filename": "simpleperf/simpleperf_app_runner/simpleperf_app_runner.cpp",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2019-01-23T23:22:51Z",
      "side": 1,
      "message": "yeah, it can show whether a file exists. Limit it to come from /data/local/tmp.",
      "parentUuid": "327c57ec_d324fd19",
      "range": {
        "startLine": 110,
        "startChar": 45,
        "endLine": 110,
        "endChar": 66
      },
      "revId": "cc6e0caae142efbbd73bd9e7b0d178d1b79a5cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e17f473_a91846b9",
        "filename": "simpleperf/simpleperf_app_runner/simpleperf_app_runner.cpp",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1003966
      },
      "writtenOn": "2019-01-23T00:12:20Z",
      "side": 1,
      "message": "I don\u0027t think this is sufficient. All this says is that the file descriptor is open in the simpleperf_app_runner process, not that it was passed by the entity invoking the the simpleperf_app_runner process. If the simpleperf_app_runner process opens any file descriptors itself (or via one of it\u0027s dependent libraries), then this check could pass.\n\nAdditionally, it\u0027s quicker to use fcntl(fd, F_GETFD) or fcntl(fd, F_GETFL) to determine if the file descriptor is opened. If this function returns -1 with errno\u003dEBADF then the file descriptor isn\u0027t opened.\n\nUnfortunately, I\u0027m struggling with how to fix this concern. I don\u0027t see any way for a program to determine if a file descriptor was passed in via exec() vs created itself. :-(",
      "revId": "cc6e0caae142efbbd73bd9e7b0d178d1b79a5cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "752f13cb_8e185e82",
        "filename": "simpleperf/simpleperf_app_runner/simpleperf_app_runner.cpp",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1056364
      },
      "writtenOn": "2019-01-23T01:22:10Z",
      "side": 1,
      "message": "changed to fcntl. simpleperf_app_runner is small, and CheckSimpleperfArguments() is called before anything. It only has stdio files and files passed in via exec().",
      "parentUuid": "2e17f473_a91846b9",
      "revId": "cc6e0caae142efbbd73bd9e7b0d178d1b79a5cd9",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889",
      "unresolved": true
    }
  ]
}